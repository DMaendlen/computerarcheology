#!/usr/bin/perl
# file: /bin/pps
# usage: pps
#
# emulates `ps axl`
# ps a: list All processes
# ps x: don't require TTYs
# ps l: BSD long format
#
# Sample output:
# F   UID   PID  PPID PRI  NI    VSZ   RSS WCHAN  STAT TTY        TIME COMMAND
# 4     0     1     0  20   0 187048  5552 ?      Ss   ?          0:01
#       /sbin/init
#
#
# omitted F-field, due to this being unsolvable with just information from man
# proc

use strict;
use warnings;
use Switch;
use POSIX;
use Data::Dumper;

# beautify strings by turning NULL into space and cut off trailing spaces
# @param: $string
# @return: $string
sub spaceCosmetics {
	my ($string) = @_;
	$string =~ s/\000/ /g;
	$string =~ s/\s$//;
	chomp $string;
	return $string;
}

# read /proc/[pid]/stat
# @param: $pid
# @return: hash containing info for pid, state, ppid, tty, flags, priority,
# nice, time
sub readStat {
	my ($currentproc) = @_;
	my $filename = "/proc/${currentproc}/stat";
	open FILE, $filename or do{
		warn "Can't open '$filename': $!";
		return {};
	};
	my $line = <FILE>;
	close FILE;
	chomp $line;

	# read relevant info from stat
	my @rawStats = split(/\s+/, $line);
	my ($pid, $state, $ppid, $tty_nr, $flags, $utime, $stime, $priority,
		$nice) = @rawStats[0, 2, 3, 6, 8, 13, 14, 17, 18];

	# time is calculated from utime+stime (given in clock-ticks)
	my $clock_ticks = POSIX::sysconf( &POSIX::_SC_CLK_TCK  );
	my $cumulative_cpu_time = $utime + $stime;
	my $cumulative_cpu_time_int = int ($cumulative_cpu_time / $clock_ticks);
	my $cumulative_cpu_seconds = $cumulative_cpu_time_int % 60;
	my $cumulative_cpu_minutes = int ($cumulative_cpu_time_int / 60);
	my $cputime = sprintf("%0d:%02d", $cumulative_cpu_minutes,
		$cumulative_cpu_seconds);

	# F field looks at the first character of the flags-field, evidently
	# this is wrong. TODO
	# $flags = substr($flags, 0, 1);

	# calculating tty from tty_nr
	my $major_mask = 0xFF00;
	my $minor_mask = 0xFFFF00FF;
	my $tty_major = ($tty_nr & $major_mask) >> 8;
	my $tty_minor = $tty_nr & $minor_mask;
	my $tty = '?';
	if ($tty_major eq 4) {
		$tty = 'tty' . $tty_minor;
	} elsif ($tty_major >= 136 && $tty_major <= 143) {
		$tty = 'pts/' . $tty_minor;
	}

	# return a hash of the values we found
	my $result = {};
	$result->{'pid'} = $pid;
	$result->{'state'} = $state;
	$result->{'ppid'} = $ppid;
	$result->{'tty'} = $tty;
	#$result->{'flags'} = $flags;
	$result->{'priority'} = $priority;
	$result->{'nice'} = $nice;
	$result->{'time'} = $cputime;
	foreach my $stat (keys %{$result}) {
		$result->{$stat} = spaceCosmetics($result->{$stat});
	}

	return $result;
}

# read /proc/[pid]/cmdline, if nothing is found read /proc/[pid]/stat
# @param: $pid
# @return: commandline of process
sub readCommand {
	my ($currentproc) = @_;
	my $filename = "/proc/${currentproc}/cmdline";
	open FILE, $filename or do {
		warn "Can't open '$filename': $!";
		return '';
	};
	my $line = <FILE>;
	close FILE;

	# return early if we found something worthwile
	if($line) {
		$line = spaceCosmetics($line);
		return $line;
	}

	# use a field in /proc/[pid]/stat if we didn't find anything
	$filename = "/proc/${currentproc}/stat";
	open FILE, $filename or do {
		warn "Can't open '$filename': $!";
		return '';
	};
	$line = <FILE>;
	close FILE;
	my $cmd = (split(/\s+/, $line))[1];
	return spaceCosmetics($cmd);
}

# read /proc/[pid]/status to get uid
# @param: $pid
# @return: effective uid of process
sub readUid{
	my ($currentproc) = @_;
	my $uid = "?";
	my $filename = "/proc/${currentproc}/status";
	open FILE, $filename or do {
		warn "Can't open '$filename': $!";
		return '';
	};
	while (my $line = <FILE>) {
		next if $line !~/^Uid:/;
		$uid = (split(/\s+/, $line))[2];
	}
	close FILE;
	return spaceCosmetics($uid);
}

# read /proc/[pid]/status to get VmSize
# @param: $pid
# @return: VmSize of process
sub readVsize {
	my ($currentproc) = @_;
	my $vsize = "0";
	my $filename = "/proc/${currentproc}/status";
	open FILE, $filename or do{
		warn "Can't open '$filename': $!";
		return '';
	};
	while (my $line = <FILE>) {
		next if $line !~/VmSize:/;
		$vsize = (split(/\s+/, $line))[1];
	}
	close FILE;
	return spaceCosmetics($vsize);
}

# read /proc/[pid]/status to get VmRSS
# @param: $pid
# @return: VmRSS
sub readRss {
	my $currentproc = shift(@_);
	my $rss = "0";
	my $filename = "/proc/${currentproc}/status";
	open FILE, $filename or do{
		warn "Can't open '$filename': $!";
		return '';
	};
	while (my $line = <FILE>) {
		next if $line !~/VmRSS/;
		$rss= (split(/\s+/, $line))[1];
	}
	close FILE;
	return spaceCosmetics($rss);
}

# read /proc/[pid]/wchan
# @param: $pid
# @return: Wchan
sub readWchan {
	my $currentproc = shift(@_);
	my $wchan = "?";
	my $filename = "/proc/${currentproc}/wchan";
	open FILE, $filename or do{
		warn "Can't open '$filename': $!";
		return '';
	};
	while (my $line = <FILE>) {
		$wchan = $line;
	}
	close FILE;
	return spaceCosmetics($wchan);
}

# read /proc/
# @param: -/-
# @return: array of process-hashes (key: $pid, value: %statusvalues)
sub readProc {
	my @processStats;
	# read all dirs in $path
	my $procdir = "/proc/";
	opendir PROC, $procdir or die "Can't open directory '$procdir': $!";
	while ( my $dir = readdir PROC ) {
		next if $dir !~/^\d+$/;
		my $result = {$dir, readStat($dir)};
		$result->{$dir}->{command} = readCommand($dir);
		$result->{$dir}->{uid} = readUid($dir);
		$result->{$dir}->{vsize} = readVsize($dir);
		$result->{$dir}->{rss} = readRss($dir);
		$result->{$dir}->{wchan} = readWchan($dir);
		push @processStats, $result;
	}
	closedir PROC;

	return @processStats;
}

# print results
my @processes = readProc();
my $headline =	"UID\tPID\tPPID\tPRI\tNI\tVSZ\tRSS\tWCHAN" .
		"\tSTAT\tTTY\tTIME\tCommand\n";
print($headline);
for my $proc (@processes) {
	foreach my $pid (keys %{$proc}) {
		my $out = '';
		my $pidref = $proc->{$pid};
		$out = join("\t",
			#$pidref->{flags},
			$pidref->{uid},
			$pidref->{pid},
			$pidref->{ppid},
			$pidref->{priority},
			$pidref->{nice},
			$pidref->{vsize},
			$pidref->{rss},
			$pidref->{wchan},
			$pidref->{state},
			$pidref->{tty},
			$pidref->{time},
			substr($pidref->{command}, 0, 50)
		);
		$out .= "\n";
		print($out);
	}
}
